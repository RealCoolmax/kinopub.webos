{"version":3,"sources":["components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","containers/collectionsListInfinite/collectionsListInfinite.tsx","views/collections/collections.tsx","components/seo/seo.tsx","hooks/useInViewport.ts","components/scrollable/scrollable.tsx","components/title/title.tsx","components/imageItem/imageItem.tsx","../node_modules/react-query/es/react/QueryErrorResetBoundary.js","../node_modules/react-query/es/react/useBaseQuery.js","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","../node_modules/react-query/es/core/queryObserver.js","components/input/input.tsx"],"names":["CollectionItem","collection","className","history","useHistory","handleOnClick","useCallback","id","push","generatePath","PATHS","Collection","collectionId","title","onClick","source","posters","medium","caption","cx","CollectionsList","collections","loading","onScrollToEnd","scrollable","content","map","Array","_","idx","CollectionsListInfinite","queryResult","processItems","useInfiniteItems","items","isLoading","fetchMore","CollectionsView","useState","query","setQuery","useApiInfinite","handleQueryChange","value","placeholder","onChange","Seo","props","Helmet","defaultTitle","titleTemplate","useInViewport","target","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","Scrollable","children","footerRef","ref","Title","ImageItem","wrapperClassName","src","alt","createValue","_isReset","clearReset","reset","isReset","QueryErrorResetBoundaryContext","React","createContext","useBaseQuery","Observer","mountedRef","queryClient","useQueryClient","errorResetBoundary","useContext","defaultedOptions","defaultQueryObserverOptions","optimisticResults","onError","notifyManager","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","retryOnMount","result","getOptimisticResult","unsubscribe","subscribe","x","updateResult","setOptions","listeners","fetchOptimistic","then","_ref","data","catch","error","undefined","isError","isFetching","notifyOnChangeProps","trackResult","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","useMemo","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","method","params","client","ApiClient","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","QueryObserver","_Subscribable","_this","call","this","trackedProps","previousSelectError","bindMethods","_inheritsLoose","_proto","prototype","remove","bind","refetch","onSubscribe","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","enabled","refetchOnReconnect","isStale","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateStaleTimeout","refetchInterval","updateRefetchInterval","getQueryCache","build","createResult","getCurrentResult","currentResult","_this2","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","getNextResult","_this3","Promise","resolve","reject","throwOnError","getCurrentQuery","fetch","_this4","fetchOptions","_this5","promise","noop","_this6","clearStaleTimeout","isServer","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","status","isPreviousData","isPlaceholderData","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","replaceEqualDeep","selectError","getLogger","Date","now","placeholderData","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","isExcluded","shallowEqualObjects","defaultNotifyOptions","cache","notify","_extends","onQueryUpdate","action","type","isCancelledError","_this8","batch","listener","Subscribable","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","isStaleByTime","Input","autoFocus","inputRef","handleChange","frameId","requestAnimationFrame","domNode","querySelector","focus","cancelAnimationFrame"],"mappings":"uRAkCeA,EArByB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAC/CC,EAAUC,cACVC,EAAgBC,uBAAY,YAChC,OAAIL,QAAJ,IAAIA,OAAJ,EAAIA,EAAYM,KACdJ,EAAQK,KACNC,YAAaC,IAAMC,WAAY,CAC7BC,aAAcX,EAAWM,KAE3B,CACEN,aACAY,MAAOZ,EAAWY,UAIvB,CAACZ,EAAYE,IAEhB,OACE,cAAC,IAAD,CAAWW,QAAST,EAAeU,OAAM,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAYe,QAAQC,OAAQC,QAAO,OAAEjB,QAAF,IAAEA,OAAF,EAAEA,EAAYY,MAAOX,UAAWiB,IAAG,OAAQjB,M,kBCE9GkB,EAhB0B,SAAC,GAAuE,IAArEP,EAAoE,EAApEA,MAAOQ,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,cAAuC,IAAxBC,kBAAwB,SACxGC,EACJ,gCACE,cAAC,IAAD,CAAOZ,MAAOA,IACd,sBAAKX,UAAU,sBAAf,UACGwB,IAAIL,GAAa,SAACpB,GAAD,OAChB,cAAC,EAAD,CAAoCA,WAAYA,GAA3BA,EAAWM,OAEjCe,GAAWI,IAAI,YAAI,IAAIC,MAAM,MAAM,SAACC,EAAGC,GAAJ,OAAY,cAAC,EAAD,GAAqBA,YAK3E,OAAOL,EAAa,cAAC,IAAD,CAAYD,cAAeA,EAA3B,SAA2CE,IAAwBA,G,SCd1EK,EANkC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC/D,EAAsCC,YAAiBF,EAAaC,GAApE,mBAAOE,EAAP,KAAcC,EAAd,KAAyBC,EAAzB,KAEA,OAAO,cAAC,EAAD,CAAiBf,YAAaa,EAAOZ,QAASa,EAAWZ,cAAea,K,SCiBlEC,EAtBmB,WAChC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMT,EAAcU,YAAe,cAAe,CAACF,EAAO,cAEpDG,EAAoBpC,uBACxB,SAACqC,GACCH,EAASG,KAEX,CAACH,IAGH,OACE,qCACE,cAAC,IAAD,CAAK3B,MAAM,qDACX,qBAAKX,UAAU,gBAAf,SACE,cAAC,IAAD,CAAO0C,YAAY,uGAAuBD,MAAOJ,EAAOM,SAAUH,MAEpE,cAAC,EAAD,CAAyBX,YAAaA,S,+FChB7Be,EAJc,SAACC,GAC5B,OAAO,cAACC,EAAA,EAAD,aAAQC,aAAa,UAAUC,cAAc,sBAAyBH,M,gICsGhEI,EAnGO,SACpBC,EACAL,EACAM,GAEI,IADJC,EACG,uDADM,CAAEC,mBAAmB,GAEtBC,EAAqCT,EAArCS,gBAAiBC,EAAoBV,EAApBU,gBACzB,EAAwBnB,qBAAxB,mBAASoB,EAAT,KAEMC,EAAWC,iBAAoC,MAE/CC,EAAgBD,kBAAO,GACvBE,EAAcF,kBAAO,GAErBG,EAAgBH,iBAAO,GACvBI,EAAgBJ,iBAAO,GAEvBK,EAAgB3D,uBAAY,WAChC,GAAI8C,EAAOc,SAAWP,EAASO,QAAS,CACtC,IAAMC,EAAOC,sBAAYhB,EAAOc,SAC5BC,GACFR,EAASO,QAAQG,QAAQF,MAG5B,CAACf,EAAQO,IAENW,EAAehE,uBAAY,WAC/B,GAAI8C,EAAOc,SAAWP,EAASO,QAAS,CACtC,IAAMC,EAAOC,sBAAYhB,EAAOc,SAC5BC,IACFR,EAASO,QAAQK,UAAUJ,GAC3BR,EAASO,QAAQM,aACjBb,EAASO,QAAU,SAGtB,CAACd,EAAQO,IAENc,EAAqBnE,uBACzB,SAACoE,GACC,IAAMC,EAAQD,EAAQ,IAAM,GACpBE,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAClBC,EAAyC,qBAAnBF,EAAiCA,EAAiBC,EAAoB,EAGlG,IAAKf,EAAYI,SAAWY,EAU1B,OATAhB,EAAYI,SAAU,EAEP,OAAfV,QAAe,IAAfA,OAEAO,EAAcG,SAAW,EACzBL,EAAcK,QAAUY,OAExBpB,EAAYoB,GAMVhB,EAAYI,UAAYY,IAC1BhB,EAAYI,SAAU,EAEP,OAAfT,QAAe,IAAfA,OAEIH,EAAOC,mBAAqBI,EAASO,SAEvCP,EAASO,QAAQM,aAGnBR,EAAcE,SAAW,EACzBL,EAAcK,QAAUY,EAExBpB,EAAYoB,MAGhB,CAACnB,EAAUL,EAAOC,kBAAmBC,EAAiBC,IAGlDsB,EAA2BzE,uBAAY,WACtCqD,EAASO,UACZP,EAASO,QAAU,IAAIc,qBAAqBP,EAAoBpB,MAEjE,CAACM,EAAUN,EAASoB,IAWvB,OATAQ,qBAAU,WAIR,OAHAF,IACAd,IAEO,WACLK,OAED,CAACS,EAA0Bd,EAAeK,IAEtC,CACLY,WAAYrB,EAAcK,QAC1BiB,WAAYpB,EAAcG,QAC1BkB,WAAYpB,EAAcE,U,kDChFfmB,EAbqB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,SAAUpF,EAAyC,EAAzCA,UAAWqB,EAA8B,EAA9BA,cAAkBwB,EAAY,iBAClFwC,EAAY3B,iBAAuB,MAIzC,OAFAT,EAAcoC,EAAW,CAAE/B,gBAAiBjC,IAG1C,8CAAKrB,UAAWiB,IAAG,yBAA0BjB,IAAgB6C,GAA7D,cACGuC,EACA/D,GAAiB,qBAAKrB,UAAU,OAAOsF,IAAKD,U,gJCEpCE,EAZgB,SAAC,GAAoC,IAAlC5E,EAAiC,EAAjCA,MAAOX,EAA0B,EAA1BA,UAAc6C,EAAY,iBACjE,OAAKlC,EAKH,cAAC,IAAD,2BAAUkC,GAAV,IAAiB7C,UAAWiB,IAAG,WAAYjB,GAA3C,SACGW,KALI,O,yLCuBI6E,EAtBoB,SAAC,GAA0E,IAAxExF,EAAuE,EAAvEA,UAAWyF,EAA4D,EAA5DA,iBAAkB5E,EAA0C,EAA1CA,OAAQG,EAAkC,EAAlCA,QAASoE,EAAyB,EAAzBA,SAAavC,EAAY,iBAC3G,OACE,eAAC,IAAD,2BAAeA,GAAf,IAAsB7C,UAAWiB,IAAG,kCAAmCwE,GAAvE,UACE,sBAAKzF,UAAWiB,IAAG,kCAAmCjB,GAAtD,UACE,qBACEoB,QAAQ,OACRpB,UAAU,6EACV0F,IAAK7E,EACL8E,IAAK3E,IAGNoE,KAEFpE,GACC,qBAAKhB,UAAU,OAAf,SACE,mBAAGA,UAAU,wFAAb,SAAsGgB,Y,+FCxBhH,SAAS4E,IACP,IAAIC,GAAW,EACf,MAAO,CACLC,WAAY,WACVD,GAAW,GAEbE,MAAO,WACLF,GAAW,GAEbG,QAAS,WACP,OAAOH,IAKb,IAAII,EAA8CC,IAAMC,cAAcP,K,SCb/D,SAASQ,EAAajD,EAASkD,GACpC,IAAIC,EAAaJ,IAAMxC,QAAO,GAG1BF,EADkB0C,IAAM9D,SAAS,GACH,GAE9BmE,EAAcC,cACdC,EDSGP,IAAMQ,WAAWT,GCRpBU,EAAmBJ,EAAYK,4BAA4BzD,GAE/DwD,EAAiBE,mBAAoB,EAEjCF,EAAiBG,UACnBH,EAAiBG,QAAUC,IAAcC,WAAWL,EAAiBG,UAGnEH,EAAiBM,YACnBN,EAAiBM,UAAYF,IAAcC,WAAWL,EAAiBM,YAGrEN,EAAiBO,YACnBP,EAAiBO,UAAYH,IAAcC,WAAWL,EAAiBO,YAGrEP,EAAiBQ,UAGuB,kBAA/BR,EAAiBS,YAC1BT,EAAiBS,UAAY,MAI7BT,EAAiBQ,UAAYR,EAAiBU,oBAE3CZ,EAAmBT,YACtBW,EAAiBW,cAAe,IAIpC,IAGI7D,EAHmByC,IAAM9D,UAAS,WACpC,OAAO,IAAIiE,EAASE,EAAaI,MAEH,GAE5BY,EAAS9D,EAAS+D,oBAAoBb,GA2B1C,GA1BAT,IAAMnB,WAAU,WACduB,EAAWtC,SAAU,EACrByC,EAAmBX,aACnB,IAAI2B,EAAchE,EAASiE,UAAUX,IAAcC,YAAW,WACxDV,EAAWtC,SACbR,GAAY,SAAUmE,GACpB,OAAOA,EAAI,SAOjB,OADAlE,EAASmE,eACF,WACLtB,EAAWtC,SAAU,EACrByD,OAED,CAAChB,EAAoBhD,IACxByC,IAAMnB,WAAU,WAGdtB,EAASoE,WAAWlB,EAAkB,CACpCmB,WAAW,MAEZ,CAACnB,EAAkBlD,IAElBkD,EAAiBQ,UAAYI,EAAOtF,UACtC,MAAMwB,EAASsE,gBAAgBpB,GAAkBqB,MAAK,SAAUC,GAC9D,IAAIC,EAAOD,EAAKC,KACc,MAA9BvB,EAAiBM,WAA6BN,EAAiBM,UAAUiB,GAC3C,MAA9BvB,EAAiBO,WAA6BP,EAAiBO,UAAUgB,EAAM,SAC9EC,OAAM,SAAUC,GACjB3B,EAAmBX,aACS,MAA5Ba,EAAiBG,SAA2BH,EAAiBG,QAAQsB,GACvC,MAA9BzB,EAAiBO,WAA6BP,EAAiBO,eAAUmB,EAAWD,MAKxF,IAAKzB,EAAiBQ,UAAYR,EAAiBU,mBAAqBE,EAAOe,UAAYf,EAAOgB,WAChG,MAAMhB,EAAOa,MAQf,MAJ6C,YAAzCzB,EAAiB6B,sBACnBjB,EAAS9D,EAASgF,YAAYlB,IAGzBA,I,0GC5DMxF,IAxBf,SAA6BF,EAA0BC,GACrD,IAAQoG,EAAuDrG,EAAvDqG,KAAMjG,EAAiDJ,EAAjDI,UAAWyG,EAAsC7G,EAAtC6G,mBAAoBC,EAAkB9G,EAAlB8G,cAC7C,EAAgDvG,oBAAS,GAAzD,mBAAOwG,EAAP,KAAyBC,EAAzB,KAEM7G,EAAQ8G,mBACZ,kBAAMC,IAAOC,IAAOC,IAAO,OAAsBf,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMgB,OAAwC,SAACC,GAAD,OAAUA,EAAKnH,UAAS,QACvH,QAACkG,QAAD,IAACA,OAAD,EAACA,EAAMgB,QAEHE,EAAiBN,mBAAQ,kBAAOhH,EAAeA,EAAaE,GAASA,IAAQ,CAACA,EAAOF,IAErFuH,EAAiBjJ,uBAAY,WAC7BwI,IACFD,IACAE,GAAoB,MAErB,CAACD,EAAkBD,IAMtB,OAJA5D,qBAAU,WACR8D,GAAoB,KACnB,CAAC7G,EAAMsH,SAEH,CAACF,EAAgBnH,GAAayG,EAAoBW,K,+ECH5C9G,IAxBf,SACEgH,GAGC,IAFDC,EAEA,uDAFmC,GACnCrG,EACA,uCACMsG,EAASX,mBAAQ,kBAAM,IAAIY,MAAa,IACxCrH,EAAQsH,YAAgB,CAC3BJ,GAD2B,mBAChBC,KACZ,YAAoB,IAAjBI,EAAgB,EAAhBA,UAED,OAAOH,EAAOF,GAAP,MAAAE,EAAM,YAAYD,GAAZ,QAAoBI,OAJP,aAQ1BC,iBAAkB,SAACC,GAAkC,IAAD,EAClD,OAAe,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUC,kBAAV,eAAsB/F,SAAU,GAAK,IAE3Cb,IAIP,OAAOd,I,iCC5BT,uGAQW2H,EAA6B,SAAUC,GAGhD,SAASD,EAAcP,EAAQtG,GAC7B,IAAI+G,EAYJ,OAVAA,EAAQD,EAAcE,KAAKC,OAASA,MAC9BX,OAASA,EACfS,EAAM/G,QAAUA,EAChB+G,EAAMG,aAAe,GACrBH,EAAMI,oBAAsB,KAE5BJ,EAAMK,cAENL,EAAMrC,WAAW1E,GAEV+G,EAfTM,YAAeR,EAAeC,GAkB9B,IAAIQ,EAAST,EAAcU,UAud3B,OArdAD,EAAOF,YAAc,WACnBH,KAAKO,OAASP,KAAKO,OAAOC,KAAKR,MAC/BA,KAAKS,QAAUT,KAAKS,QAAQD,KAAKR,OAGnCK,EAAOK,YAAc,WACW,IAA1BV,KAAKtC,UAAUwB,SACjBc,KAAKW,aAAaC,YAAYZ,MAE1Ba,EAAmBb,KAAKW,aAAcX,KAAKjH,UAC7CiH,KAAKc,eAGPd,KAAKe,iBAITV,EAAOW,cAAgB,WAChBhB,KAAKtC,UAAUwB,QAClBc,KAAKiB,WAITZ,EAAOa,uBAAyB,WAC9B,OA4c6BjJ,EA5cE+H,KAAKW,cA6cX,KADW5H,EA5cciH,KAAKjH,SA6c1CoI,UAAqD,WAA/BpI,EAAQqI,qBAAkE,IAA/BrI,EAAQqI,oBAAgCC,EAAQpJ,EAAOc,IADzI,IAAiCd,EAAOc,GAzctCsH,EAAOiB,yBAA2B,WAChC,OA4c+BrJ,EA5cE+H,KAAKW,cA6cb,KADa5H,EA5cciH,KAAKjH,SA6c5CoI,UAAuD,WAAjCpI,EAAQwI,uBAAsE,IAAjCxI,EAAQwI,sBAAkCF,EAAQpJ,EAAOc,IAD7I,IAAmCd,EAAOc,GAzcxCsH,EAAOY,QAAU,WACfjB,KAAKtC,UAAY,GACjBsC,KAAKwB,cACLxB,KAAKW,aAAac,eAAezB,OAGnCK,EAAO5C,WAAa,SAAoB1E,EAAS2I,GAC/C,IAAIC,EAAc3B,KAAKjH,QACnB6I,EAAY5B,KAAKW,aAGrB,GAFAX,KAAKjH,QAAUiH,KAAKX,OAAO7C,4BAA4BzD,GAEnB,qBAAzBiH,KAAKjH,QAAQoI,SAA2D,mBAAzBnB,KAAKjH,QAAQoI,QACrE,MAAM,IAAIU,MAAM,oCAIb7B,KAAKjH,QAAQ+I,WAChB9B,KAAKjH,QAAQ+I,SAAWH,EAAYG,UAGtC9B,KAAK+B,cACL,IAAIC,EAAUhC,KAAKiC,eAEfD,GAAWE,EAAsBlC,KAAKW,aAAciB,EAAW5B,KAAKjH,QAAS4I,IAC/E3B,KAAKc,eAIPd,KAAKxC,aAAakE,IAEdM,GAAYhC,KAAKW,eAAiBiB,GAAa5B,KAAKjH,QAAQoI,UAAYQ,EAAYR,SAAWnB,KAAKjH,QAAQiE,YAAc2E,EAAY3E,WACxIgD,KAAKmC,sBAIHH,GAAYhC,KAAKW,eAAiBiB,GAAa5B,KAAKjH,QAAQoI,UAAYQ,EAAYR,SAAWnB,KAAKjH,QAAQqJ,kBAAoBT,EAAYS,iBAC9IpC,KAAKqC,yBAIThC,EAAOjD,oBAAsB,SAA6BrE,GACxD,IAAIwD,EAAmByD,KAAKX,OAAO7C,4BAA4BzD,GAC3Dd,EAAQ+H,KAAKX,OAAOiD,gBAAgBC,MAAMvC,KAAKX,OAAQ9C,GAC3D,OAAOyD,KAAKwC,aAAavK,EAAOsE,IAGlC8D,EAAOoC,iBAAmB,WACxB,OAAOzC,KAAK0C,eAGdrC,EAAOhC,YAAc,SAAqBlB,GACxC,IAAIwF,EAAS3C,KAET4C,EAAgB,GAgBpB,OAfAC,OAAOC,KAAK3F,GAAQ4F,SAAQ,SAAUC,GACpCH,OAAOI,eAAeL,EAAeI,EAAK,CACxCE,cAAc,EACdC,YAAY,EACZC,IAAK,WACH,IAAIC,EAAWL,EAMf,OAJKL,EAAO1C,aAAaqD,SAASD,IAChCV,EAAO1C,aAAa/J,KAAKmN,GAGpBlG,EAAOkG,SAIbT,GAGTvC,EAAOkD,cAAgB,SAAuBxK,GAC5C,IAAIyK,EAASxD,KAEb,OAAO,IAAIyD,SAAQ,SAAUC,EAASC,GACpC,IAAItG,EAAcmG,EAAOlG,WAAU,SAAUH,GACtCA,EAAOgB,aACVd,IAEIF,EAAOe,UAAuB,MAAXnF,OAAkB,EAASA,EAAQ6K,cACxDD,EAAOxG,EAAOa,OAEd0F,EAAQvG,WAOlBkD,EAAOwD,gBAAkB,WACvB,OAAO7D,KAAKW,cAGdN,EAAOE,OAAS,WACdP,KAAKX,OAAOiD,gBAAgB/B,OAAOP,KAAKW,eAG1CN,EAAOI,QAAU,SAAiB1H,GAChC,OAAOiH,KAAK8D,MAAM/K,IAGpBsH,EAAO1C,gBAAkB,SAAyB5E,GAChD,IAAIgL,EAAS/D,KAETzD,EAAmByD,KAAKX,OAAO7C,4BAA4BzD,GAC3Dd,EAAQ+H,KAAKX,OAAOiD,gBAAgBC,MAAMvC,KAAKX,OAAQ9C,GAC3D,OAAOtE,EAAM6L,QAAQlG,MAAK,WACxB,OAAOmG,EAAOvB,aAAavK,EAAOsE,OAItC8D,EAAOyD,MAAQ,SAAeE,GAC5B,IAAIC,EAASjE,KAEb,OAAOA,KAAKc,aAAakD,GAAcpG,MAAK,WAG1C,OAFAqG,EAAOzG,eAEAyG,EAAOvB,kBAIlBrC,EAAOS,aAAe,SAAsBkD,GAE1ChE,KAAK+B,cAEL,IAAImC,EAAUlE,KAAKW,aAAamD,MAAM9D,KAAKjH,QAASiL,GAMpD,OAJsB,MAAhBA,OAAuB,EAASA,EAAaJ,gBACjDM,EAAUA,EAAQnG,MAAMoG,MAGnBD,GAGT7D,EAAO8B,mBAAqB,WAC1B,IAAIiC,EAASpE,KAIb,GAFAA,KAAKqE,qBAEDC,MAAYtE,KAAK0C,cAAcrB,SAAYkD,YAAevE,KAAKjH,QAAQiE,WAA3E,CAIA,IAGIwH,EAHOC,YAAezE,KAAK0C,cAAcgC,cAAe1E,KAAKjH,QAAQiE,WAGpD,EACrBgD,KAAK2E,eAAiBC,YAAW,WAC1BR,EAAO1B,cAAcrB,SACxB+C,EAAO5G,iBAERgH,KAGLnE,EAAOgC,sBAAwB,WAC7B,IAAIwC,EAAS7E,KAEbA,KAAK8E,wBAEDR,MAAqC,IAAzBtE,KAAKjH,QAAQoI,SAAsBoD,YAAevE,KAAKjH,QAAQqJ,mBAI/EpC,KAAK+E,kBAAoBC,aAAY,YAC/BH,EAAO9L,QAAQkM,6BAA+BC,IAAaC,cAC7DN,EAAO/D,iBAERd,KAAKjH,QAAQqJ,mBAGlB/B,EAAOU,aAAe,WACpBf,KAAKmC,qBACLnC,KAAKqC,yBAGPhC,EAAOmB,YAAc,WACnBxB,KAAKqE,oBACLrE,KAAK8E,wBAGPzE,EAAOgE,kBAAoB,WACzBe,aAAapF,KAAK2E,gBAClB3E,KAAK2E,oBAAiB1G,GAGxBoC,EAAOyE,qBAAuB,WAC5BO,cAAcrF,KAAK+E,mBACnB/E,KAAK+E,uBAAoB9G,GAG3BoC,EAAOmC,aAAe,SAAsBvK,EAAOc,GACjD,IAgBI+E,EAhBA8D,EAAY5B,KAAKW,aACjBgB,EAAc3B,KAAKjH,QACnBuM,EAAatF,KAAK0C,cAClB6C,EAAkBvF,KAAKwF,mBACvBC,EAAoBzF,KAAK0F,qBACzBC,EAAc1N,IAAU2J,EACxBgE,EAAoBD,EAAc1N,EAAM4N,MAAQ7F,KAAK8F,yBACrDC,EAAkBJ,EAAc3F,KAAK0C,cAAgB1C,KAAKgG,oBAC1DH,EAAQ5N,EAAM4N,MACdnB,EAAgBmB,EAAMnB,cACtB1G,EAAQ6H,EAAM7H,MACdiI,EAAiBJ,EAAMI,eACvB9H,EAAa0H,EAAM1H,WACnB+H,EAASL,EAAMK,OACfC,GAAiB,EACjBC,GAAoB,EAGxB,GAAIrN,EAAQ0D,kBAAmB,CAC7B,IAAIuF,EAAUhC,KAAKiC,eACfoE,GAAgBrE,GAAWnB,EAAmB5I,EAAOc,GACrDuN,EAAkBtE,GAAWE,EAAsBjK,EAAO2J,EAAW7I,EAAS4I,IAE9E0E,GAAgBC,KAClBnI,GAAa,EAERuG,IACHwB,EAAS,YAMf,GAAInN,EAAQwN,mBAAqBV,EAAMW,kBAAuC,MAAnBT,OAA0B,EAASA,EAAgBU,YAAyB,UAAXP,EAC1HpI,EAAOiI,EAAgBjI,KACvB4G,EAAgBqB,EAAgBrB,cAChCwB,EAASH,EAAgBG,OACzBC,GAAiB,OAEd,GAAIpN,EAAQ2N,QAAgC,qBAAfb,EAAM/H,KAEpC,GAAIwH,GAAcO,EAAM/H,QAA6B,MAAnByH,OAA0B,EAASA,EAAgBzH,OAAS/E,EAAQ2N,UAAiC,MAArBjB,OAA4B,EAASA,EAAkBiB,UAAY1G,KAAKE,oBACxLpC,EAAOwH,EAAWxH,UAElB,IACEA,EAAO/E,EAAQ2N,OAAOb,EAAM/H,OAEM,IAA9B/E,EAAQ4N,oBACV7I,EAAO8I,YAA+B,MAAdtB,OAAqB,EAASA,EAAWxH,KAAMA,IAGzEkC,KAAKE,oBAAsB,KAC3B,MAAO2G,GACPC,cAAY9I,MAAM6I,GAClB7I,EAAQ6I,EACR7G,KAAKE,oBAAsB2G,EAC3BZ,EAAiBc,KAAKC,MACtBd,EAAS,aAKXpI,EAAO+H,EAAM/H,KAInB,GAAuC,qBAA5B/E,EAAQkO,iBAAmD,qBAATnJ,IAAoC,YAAXoI,GAAmC,SAAXA,GAAoB,CAChI,IAAIe,EAEJ,IAAmB,MAAd3B,OAAqB,EAASA,EAAWc,oBAAsBrN,EAAQkO,mBAA0C,MAArBxB,OAA4B,EAASA,EAAkBwB,iBACtJA,EAAkB3B,EAAWxH,UAI7B,GAFAmJ,EAAqD,oBAA5BlO,EAAQkO,gBAAiClO,EAAQkO,kBAAoBlO,EAAQkO,gBAElGlO,EAAQ2N,QAAqC,qBAApBO,EAC3B,IACEA,EAAkBlO,EAAQ2N,OAAOO,IAEC,IAA9BlO,EAAQ4N,oBACVM,EAAkBL,YAA+B,MAAdtB,OAAqB,EAASA,EAAWxH,KAAMmJ,IAGpFjH,KAAKE,oBAAsB,KAC3B,MAAO2G,GACPC,cAAY9I,MAAM6I,GAClB7I,EAAQ6I,EACR7G,KAAKE,oBAAsB2G,EAC3BZ,EAAiBc,KAAKC,MACtBd,EAAS,QAKgB,qBAApBe,IACTf,EAAS,UACTpI,EAAOmJ,EACPb,GAAoB,GA0BxB,MAtBa,CACXF,OAAQA,EACRrO,UAAsB,YAAXqO,EACXO,UAAsB,YAAXP,EACXhI,QAAoB,UAAXgI,EACTgB,OAAmB,SAAXhB,EACRpI,KAAMA,EACN4G,cAAeA,EACf1G,MAAOA,EACPiI,eAAgBA,EAChBkB,aAActB,EAAMuB,kBACpBC,UAAWxB,EAAMW,gBAAkB,GAAKX,EAAMyB,iBAAmB,EACjEC,oBAAqB1B,EAAMW,gBAAkBZ,EAAkBY,iBAAmBX,EAAMyB,iBAAmB1B,EAAkB0B,iBAC7HnJ,WAAYA,EACZqJ,eAA2B,UAAXtB,GAA8C,IAAxBL,EAAMnB,cAC5C0B,kBAAmBA,EACnBD,eAAgBA,EAChBsB,eAA2B,UAAXvB,GAA8C,IAAxBL,EAAMnB,cAC5CrD,QAASA,EAAQpJ,EAAOc,GACxB0H,QAAST,KAAKS,QACdF,OAAQP,KAAKO,SAKjBF,EAAOqH,sBAAwB,SAA+BvK,EAAQmI,GACpE,IAAKA,EACH,OAAO,EAGT,GAAInI,IAAWmI,EACb,OAAO,EAGT,IAAIqC,EAAgB3H,KAAKjH,QACrBqF,EAAsBuJ,EAAcvJ,oBACpCwJ,EAAgCD,EAAcC,8BAElD,IAAKxJ,IAAwBwJ,EAC3B,OAAO,EAGT,GAA4B,YAAxBxJ,IAAsC4B,KAAKC,aAAaf,OAC1D,OAAO,EAGT,IAAI2I,EAAwC,YAAxBzJ,EAAoC4B,KAAKC,aAAe7B,EAC5E,OAAOyE,OAAOC,KAAK3F,GAAQ2K,MAAK,SAAU9E,GACxC,IAAIK,EAAWL,EACX+E,EAAU5K,EAAOkG,KAAciC,EAAWjC,GAC1C2E,EAA8B,MAAjBH,OAAwB,EAASA,EAAcC,MAAK,SAAUvK,GAC7E,OAAOA,IAAMyF,KAEXiF,EAA8C,MAAjCL,OAAwC,EAASA,EAA8BE,MAAK,SAAUvK,GAC7G,OAAOA,IAAMyF,KAEf,OAAO+E,IAAYE,KAAgBJ,GAAiBG,OAIxD3H,EAAO7C,aAAe,SAAsBkE,GAC1C,IAAI4D,EAAatF,KAAK0C,cAKtB,GAJA1C,KAAK0C,cAAgB1C,KAAKwC,aAAaxC,KAAKW,aAAcX,KAAKjH,SAC/DiH,KAAKwF,mBAAqBxF,KAAKW,aAAakF,MAC5C7F,KAAK0F,qBAAuB1F,KAAKjH,SAE7BmP,YAAoBlI,KAAK0C,cAAe4C,GAA5C,CAKA,IAAI6C,EAAuB,CACzBC,OAAO,IAG0D,KAA7C,MAAjB1G,OAAwB,EAASA,EAAchE,YAAwBsC,KAAK0H,sBAAsB1H,KAAK0C,cAAe4C,KACzH6C,EAAqBzK,WAAY,GAGnCsC,KAAKqI,OAAOC,YAAS,GAAIH,EAAsBzG,MAGjDrB,EAAO0B,YAAc,WACnB,IAAI9J,EAAQ+H,KAAKX,OAAOiD,gBAAgBC,MAAMvC,KAAKX,OAAQW,KAAKjH,SAEhE,GAAId,IAAU+H,KAAKW,aAAnB,CAIA,IAAIiB,EAAY5B,KAAKW,aACrBX,KAAKW,aAAe1I,EACpB+H,KAAK8F,yBAA2B7N,EAAM4N,MACtC7F,KAAKgG,oBAAsBhG,KAAK0C,cAE5B1C,KAAKiC,iBACM,MAAbL,GAA6BA,EAAUH,eAAezB,MACtD/H,EAAM2I,YAAYZ,SAItBK,EAAOkI,cAAgB,SAAuBC,GAC5C,IAAI9G,EAAgB,GAEA,YAAhB8G,EAAOC,KACT/G,EAAc7E,WAAY,EACD,UAAhB2L,EAAOC,MAAqBC,YAAiBF,EAAOxK,SAC7D0D,EAAchF,SAAU,GAG1BsD,KAAKxC,aAAakE,GAEd1B,KAAKiC,gBACPjC,KAAKe,gBAITV,EAAOgI,OAAS,SAAgB3G,GAC9B,IAAIiH,EAAS3I,KAEbrD,IAAciM,OAAM,WAEdlH,EAAc7E,WACY,MAA5B8L,EAAO5P,QAAQ8D,WAA6B8L,EAAO5P,QAAQ8D,UAAU8L,EAAOjG,cAAc5E,MAC9D,MAA5B6K,EAAO5P,QAAQ+D,WAA6B6L,EAAO5P,QAAQ+D,UAAU6L,EAAOjG,cAAc5E,KAAM,OACvF4D,EAAchF,UACG,MAA1BiM,EAAO5P,QAAQ2D,SAA2BiM,EAAO5P,QAAQ2D,QAAQiM,EAAOjG,cAAc1E,OAC1D,MAA5B2K,EAAO5P,QAAQ+D,WAA6B6L,EAAO5P,QAAQ+D,eAAUmB,EAAW0K,EAAOjG,cAAc1E,QAInG0D,EAAchE,WAChBiL,EAAOjL,UAAUqF,SAAQ,SAAU8F,GACjCA,EAASF,EAAOjG,kBAKhBhB,EAAc0G,OAChBO,EAAOtJ,OAAOiD,gBAAgB+F,OAAO,CACnCpQ,MAAO0Q,EAAOhI,aACd8H,KAAM,+BAMP7I,EA1e+B,CA2etCkJ,KAUF,SAASjI,EAAmB5I,EAAOc,GACjC,OATF,SAA2Bd,EAAOc,GAChC,OAA2B,IAApBA,EAAQoI,UAAsBlJ,EAAM4N,MAAMnB,iBAA0C,UAAvBzM,EAAM4N,MAAMK,SAA+C,IAAzBnN,EAAQmE,cAQvG6L,CAAkB9Q,EAAOc,IALlC,SAA8Bd,EAAOc,GACnC,OAA2B,IAApBA,EAAQoI,SAAqBlJ,EAAM4N,MAAMnB,cAAgB,IAAiC,WAA3B3L,EAAQiQ,iBAA0D,IAA3BjQ,EAAQiQ,gBAA4B3H,EAAQpJ,EAAOc,IAIpHkQ,CAAqBhR,EAAOc,GAW1E,SAASmJ,EAAsBjK,EAAO2J,EAAW7I,EAAS4I,GACxD,OAA2B,IAApB5I,EAAQoI,UAAsBlJ,IAAU2J,IAAqC,IAAxBD,EAAYR,UAAsBE,EAAQpJ,EAAOc,GAG/G,SAASsI,EAAQpJ,EAAOc,GACtB,OAAOd,EAAMiR,cAAcnQ,EAAQiE,a,wLC/dtBmM,EArCgB,SAAC,GAAkD,IAAhDvT,EAA+C,EAA/CA,UAAW2C,EAAoC,EAApCA,SAAU6Q,EAA0B,EAA1BA,UAAc3Q,EAAY,iBACzE4Q,EAAW/P,iBAAyB,MACpCgQ,EAAetT,uBACnB,YAAmC,IAAhCqC,EAA+B,EAA/BA,MACO,OAARE,QAAQ,IAARA,KAAWF,KAEb,CAACE,IAoBH,OAjBAoC,qBAAU,WACR,IAAI4O,EASJ,OAPIH,IACFG,EAAUC,uBAAsB,WAAO,IAAD,EAC9BC,EAAU3P,sBAAYuP,EAASzP,SAC9B,OAAP6P,QAAO,IAAPA,GAAA,UAAAA,EAASC,cAAc,gBAAvB,SAAiCC,YAI9B,WACDJ,GACFK,qBAAqBL,MAGxB,CAACF,EAAUD,IAGZ,cAAC,IAAD,2BACM3Q,GADN,IAGEyC,IAAKmO,EACLzT,UAAWiB,IAAG,SAAUjB,GACxB2C,SAAU+Q","file":"static/js/20.c5442719.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { Collection } from 'api';\nimport ImageItem from 'components/imageItem';\nimport { PATHS, generatePath } from 'routes';\n\ntype Props = {\n  collection?: Collection;\n  className?: string;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection, className }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n        {\n          collection,\n          title: collection.title,\n        },\n      );\n    }\n  }, [collection, history]);\n\n  return (\n    <ImageItem onClick={handleOnClick} source={collection?.posters.medium} caption={collection?.title} className={cx('h-72', className)} />\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\nimport Title from 'components/title';\n\ntype Props = {\n  title?: string;\n  collections?: Collection[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n  scrollable?: boolean;\n};\n\nconst CollectionsList: React.FC<Props> = ({ title, collections, loading, onScrollToEnd, scrollable = true }) => {\n  const content = (\n    <div>\n      <Title title={title} />\n      <div className=\"flex flex-wrap pr-2\">\n        {map(collections, (collection) => (\n          <CollectionItem key={collection.id} collection={collection} />\n        ))}\n        {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n      </div>\n    </div>\n  );\n\n  return scrollable ? <Scrollable onScrollToEnd={onScrollToEnd}>{content}</Scrollable> : content;\n};\n\nexport default CollectionsList;\n","import { Collection } from 'api';\nimport CollectionsList from 'components/collectionsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  queryResult: QueryResult;\n  processItems?: (items: Collection[]) => Collection[];\n};\n\nconst CollectionsListInfinite: React.FC<Props> = ({ queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <CollectionsList collections={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default CollectionsListInfinite;\n","import React, { useCallback, useState } from 'react';\n\nimport Input from 'components/input';\nimport Seo from 'components/seo';\nimport CollectionsListInfinite from 'containers/collectionsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\n\nconst CollectionsView: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const queryResult = useApiInfinite('collections', [query, 'watchers-']);\n\n  const handleQueryChange = useCallback(\n    (value) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <Seo title=\"Подборки\" />\n      <div className=\"m-1 mb-3 mr-2\">\n        <Input placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n      </div>\n      <CollectionsListInfinite queryResult={queryResult} />\n    </>\n  );\n};\n\nexport default CollectionsView;\n","import { Helmet, HelmetProps } from 'react-helmet';\n\ntype Props = {} & HelmetProps;\n\nconst Seo: React.FC<Props> = (props) => {\n  return <Helmet defaultTitle=\"Unknown\" titleTemplate=\"%s | Kinopub WebOS\" {...props} />;\n};\n\nexport default Seo;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useRef } from 'react';\nimport cx from 'classnames';\n\nimport useInViewport from 'hooks/useInViewport';\n\ntype Props = {\n  onScrollToEnd?: () => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Scrollable: React.FC<Props> = ({ children, className, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <div className={cx('overflow-y-auto h-full', className)} {...props}>\n      {children}\n      {onScrollToEnd && <div className=\"h-40\" ref={footerRef} />}\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import cx from 'classnames';\n\nimport Text from 'components/text';\n\ntype Props = {\n  title?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Title: React.FC<Props> = ({ title, className, ...props }) => {\n  if (!title) {\n    return null;\n  }\n\n  return (\n    <Text {...props} className={cx('m-1 mb-3', className)}>\n      {title}\n    </Text>\n  );\n};\n\nexport default Title;\n","import cx from 'classnames';\n\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  className?: string;\n  wrapperClassName?: string;\n  source?: string;\n  caption?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst ImageItem: React.FC<Props> = ({ className, wrapperClassName, source, caption, children, ...props }) => {\n  return (\n    <Spottable {...props} className={cx('rounded-xl w-1/5 cursor-pointer', wrapperClassName)}>\n      <div className={cx('h-40 m-1 flex flex-col relative', className)}>\n        <img\n          loading=\"lazy\"\n          className=\"w-full h-full object-cover rounded-xl border-2 border-gray-300 bg-gray-300\"\n          src={source}\n          alt={caption}\n        />\n\n        {children}\n      </div>\n      {caption && (\n        <div className=\"px-2\">\n          <p className=\"text-gray-200 text-sm text-center overflow-hidden overflow-ellipsis whitespace-nowrap\">{caption}</p>\n        </div>\n      )}\n    </Spottable>\n  );\n};\n\nexport default ImageItem;\n","import React from 'react'; // CONTEXT\n\nfunction createValue() {\n  var _isReset = false;\n  return {\n    clearReset: function clearReset() {\n      _isReset = false;\n    },\n    reset: function reset() {\n      _isReset = true;\n    },\n    isReset: function isReset() {\n      return _isReset;\n    }\n  };\n}\n\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/React.createContext(createValue()); // HOOK\n\nexport var useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {\n  return React.useContext(QueryErrorResetBoundaryContext);\n}; // COMPONENT\n\nexport var QueryErrorResetBoundary = function QueryErrorResetBoundary(_ref) {\n  var children = _ref.children;\n  var value = React.useMemo(function () {\n    return createValue();\n  }, []);\n  return /*#__PURE__*/React.createElement(QueryErrorResetBoundaryContext.Provider, {\n    value: value\n  }, typeof children === 'function' ? children(value) : children);\n};","import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var _React$useState2 = React.useState(function () {\n    return new Observer(queryClient, defaultedOptions);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    observer.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary, observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError && !result.isFetching) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result);\n  }\n\n  return result;\n}","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>(data?.pages as unknown as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","import { useCallback, useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport InputBase, { InputProps } from '@enact/moonstone/Input';\nimport cx from 'classnames';\n\ntype Props = {\n  onChange?: (value: string) => void;\n  className?: string;\n} & InputProps;\n\nconst Input: React.FC<Props> = ({ className, onChange, autoFocus, ...props }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handleChange = useCallback(\n    ({ value }: { value: string }) => {\n      onChange?.(value);\n    },\n    [onChange],\n  );\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        const domNode = findDOMNode(inputRef.current) as HTMLDivElement;\n        domNode?.querySelector('input')?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [inputRef, autoFocus]);\n\n  return (\n    <InputBase\n      {...props}\n      // @ts-expect-error\n      ref={inputRef}\n      className={cx('w-full', className)}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}